*ASSIGN LIBRARIES;

LIBNAME TA4U1R9 ORACLE USER=TA4U1R9 PW="T$numoy009$!" PATH=SAS10P1 PRESERVE_TAB_NAMES=YES SCHEMA=TA4U1R9;

LIBNAME CORESAS ORACLE USER=TA4U1R9 PW="T$numoy009$!" PATH=SAS10P1 PRESERVE_TAB_NAMES=YES SCHEMA=CORESAS;

LIBNAME DATALIB "\\10.8.8.51\LV0\TANUMOY\DATASETS\MODEL REPLICATION";

OPTIONS MACROGEN SYMBOLGEN MLOGIC MPRINT;


DATA DATALIB.ODS_DATE_LOOKUP_T;
 SET CORESAS.ODS_DATE_LOOKUP_T;
RUN;

%MACRO IMPORT(LIBNAME, SAMPLES, INPUTLIB);

 PROC DATASETS LIBRARY=&INPUTLIB MEMTYPE=DATA NODETAILS;
  CONTENTS OUT=WORK.TEMP1 (KEEP=MEMNAME) DATA=_ALL_ NOPRINT;
 RUN;

 DATA TEMP1;  SET TEMP1;
  WHERE MEMNAME NE "QUEST_TEMP_EXPLAIN" AND INDEX(MEMNAME,"DATERANGE")=0
		  AND  INDEX(MEMNAME,"ORDLN")=0 AND INDEX(MEMNAME,"TXN_P365")=0
		  AND  INDEX(MEMNAME,"ON")>0 AND INDEX(MEMNAME,"MAILED_SEGS")=0
		  AND  INDEX(MEMNAME,"COMBINED")=0 AND INDEX(MEMNAME,"SHOPPED")=0
		  AND  INDEX(MEMNAME,"REDEEMED")=0 AND INDEX(MEMNAME,"SCORES")=0;
 RUN;

 PROC SQL UNDO_POLICY=NONE;
  CREATE TABLE TEMP1 AS SELECT DISTINCT * FROM TEMP1;
 QUIT;

 
 %LET SAMPLECOUNT=%SYSFUNC(COUNTW(&SAMPLES));

 %DO I=1 %TO &SAMPLECOUNT;
   %LET SAMPLENAME=%SCAN(&SAMPLES,&I," ");
   %PUT &SAMPLENAME;

   DATA TEMP2; SET TEMP1; WHERE INDEX(MEMNAME,"_&SAMPLENAME._")>0; RUN;

   %LET BASEDS=ON_&SAMPLENAME._DM;
   
    PROC SQL UNDO_POLICY=NONE;
	 SELECT COUNT(*) INTO: NUM_DATASETS FROM TEMP2;
	QUIT;
    
	DATA &LIBNAME..&BASEDS;
	 SET &INPUTLIB..&BASEDS;
	RUN;

    PROC SORT DATA=&LIBNAME..&BASEDS OUT=&LIBNAME..ON_&SAMPLENAME._COMBINED;
	 BY CUSTOMER_KEY;
	RUN;

   %DO J=1 %TO &NUM_DATASETS;

     DATA TEMP3; SET TEMP2; IF _N_=&J; 
	  CALL SYMPUT("DSNAME", MEMNAME);
	 RUN;
		
	 %PUT &DSNAME; 

	 %IF &DSNAME NE &BASEDS %THEN %DO;
	 	
	    DATA &LIBNAME..&DSNAME;
		 SET &INPUTLIB..&DSNAME;
		RUN;
		
		%IF &LIBNAME NE &INPUTLIB %THEN %DO;
			PROC SQL;
			 DROP TABLE &INPUTLIB..&DSNAME;
			QUIT;
		%END;

		PROC SORT DATA=&LIBNAME..&DSNAME;
		 BY CUSTOMER_KEY;
		RUN;

		DATA &LIBNAME..ON_&SAMPLENAME._COMBINED;
		 MERGE &LIBNAME..ON_&SAMPLENAME._COMBINED (IN=A)
			   &LIBNAME..&DSNAME (IN=B);
  		 BY CUSTOMER_KEY;
		 IF A=1;
		RUN;

     %END;

   %END;

   DATA &LIBNAME..ON_&SAMPLENAME._COMBINED;
    SET &LIBNAME..ON_&SAMPLENAME._COMBINED;
	LENGTH CELL_LABEL_1 $200.; LENGTH TREATMENT_CODE_1 $200.; LENGTH EVENT_TYPE_1 $200.;
	FORMAT CELL_LABEL_1 $200.; FORMAT TREATMENT_CODE_1 $200.; FORMAT EVENT_TYPE_1 $200.;
	CELL_LABEL_1=CELL_LABEL; TREATMENT_CODE_1=TREATMENT_CODE; EVENT_TYPE_1=EVENT_TYPE;
	DROP CELL_LABEL TREATMENT_CODE EVENT_TYPE;
	RENAME CELL_LABEL_1=CELL_LABEL;
	RENAME TREATMENT_CODE_1=TREATMENT_CODE;
	RENAME EVENT_TYPE_1=EVENT_TYPE;
   RUN;
   
   DATA &LIBNAME..ON_&SAMPLENAME._COMBINED(DROP=Z);                                                    
    SET &LIBNAME..ON_&SAMPLENAME._COMBINED;                                                            
    ARRAY TESTMISS(*) _NUMERIC_;                                            
    DO Z = 1 TO DIM(TESTMISS);                                              
     IF TESTMISS(Z)=. THEN TESTMISS(Z)=0;                                    
    END;                                                                    
   RUN; 

 %END;

%MEND;

%IMPORT(LIBNAME=DATALIB, INPUTLIB=DATALIB, SAMPLES = 226082 230123 230203 232120 236615 237029 239665 240226);

*225763 226615 227954 229762 231038 231461 240218 240311;


*IMPORT THE DATA FROM TA4U1R9 USER SCHEMA IN MDS TO LOCAL DRIVE THROUGH SAS;

%MACRO APPEND(LIBNAME, SAMPLES, INPUTLIB);

 %LET SAMPLECOUNT=%SYSFUNC(COUNTW(&SAMPLES));

 %DO I=1 %TO &SAMPLECOUNT;
   %LET SAMPLENAME=%SCAN(&SAMPLES,&I," ");
   %PUT &SAMPLENAME;
   
   DATA &LIBNAME..ON_&SAMPLENAME._COMBINED;
	 SET &LIBNAME..ON_&SAMPLENAME._COMBINED;
	 CAMPAIGN="&SAMPLENAME";
   RUN;

   %IF &I=1 %THEN %DO;
    DATA &LIBNAME..ON_ALLCAMPAIGNS_COMBINED;
	 SET &LIBNAME..ON_&SAMPLENAME._COMBINED;
	RUN;
   %END;

   %IF &I>1 %THEN %DO;
    PROC APPEND BASE=&LIBNAME..ON_ALLCAMPAIGNS_COMBINED
				DATA=&LIBNAME..ON_&SAMPLENAME._COMBINED FORCE;
	RUN;
   %END;

 %END;

%MEND;

%APPEND(LIBNAME=DATALIB, INPUTLIB=TA4U1R9, SAMPLES = 226082 230123 230203 232120 236615 237029 239665 240226);




%MACRO CHECK(LIBNAME, SAMPLES, INPUTLIB);

 %LET SAMPLECOUNT=%SYSFUNC(COUNTW(&SAMPLES));

 %DO I=1 %TO &SAMPLECOUNT;
   %LET SAMPLENAME=%SCAN(&SAMPLES,&I," ");
   %PUT &SAMPLENAME;
   
   PROC SQL UNDO_POLICY=NONE;
    SELECT DISTINCT START_DT, END_DT FROM &LIBNAME..ON_&SAMPLENAME._DM;
   QUIT;
   
   PROC FREQ DATA=&LIBNAME..ON_&SAMPLENAME._COMBINED;
    TABLE CARD_STATUS*RESPONDER;
   RUN;

 %END;

%MEND;

%CHECK(LIBNAME=DATALIB, INPUTLIB=TA4U1R9, SAMPLES= 226082 230123 230203 232120 236615 237029 239665 240226);


%MACRO COUNTS(LIBNAME, SAMPLES, INPUTLIB);

 %LET SAMPLECOUNT=%SYSFUNC(COUNTW(&SAMPLES));

 %DO I=1 %TO &SAMPLECOUNT;
   %LET SAMPLENAME=%SCAN(&SAMPLES,&I," ");
   %PUT &SAMPLENAME;
   
   PROC SQL UNDO_POLICY=NONE;

    SELECT DISTINCT COUNT(CUSTOMER_KEY) AS RECORDS,
		   COUNT(DISTINCT CUSTOMER_KEY) AS DIST_CUST 
	FROM &LIBNAME..ON_&SAMPLENAME._DM;
 
	SELECT DISTINCT COUNT(CUSTOMER_KEY) AS RECORDS,
		   COUNT(DISTINCT CUSTOMER_KEY) AS DIST_CUST 
	FROM &LIBNAME..ON_&SAMPLENAME._COMBINED;
 
   QUIT;


 %END;

%MEND;

%COUNTS(LIBNAME=DATALIB, INPUTLIB=TA4U1R9, SAMPLES=226082 230123 230203 232120 236615 237029 239665 240226);

*226082 230123 230203 232120 236615 237029 239665 240226;


DATA DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 SET DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 TREATMENT_GROUP=1;
 IF TREATMENT_CODE EQ LOWCASE("CONTROL") THEN TREATMENT_GROUP=0;
RUN;



*FIND PROPORTION OF RESPONDERS AND NON RESPONDERS IN THE COMBINED SAMPLE AND STORE THE VALUES IN GLOBAL VARIABLES;

PROC SQL;
 SELECT COUNT(*) INTO: RESPONDERS FROM DATALIB.ON_ALLCAMPAIGNS_COMBINED WHERE RESPONDER=1;
 SELECT COUNT(*) INTO: NONRESPONDERS FROM DATALIB.ON_ALLCAMPAIGNS_COMBINED WHERE RESPONDER=0;
QUIT;

%LET PROP_RESPONDERS=%SYSEVALF(&RESPONDERS/%SYSEVALF(&RESPONDERS+&NONRESPONDERS));
%LET PROP_NONRESPONDERS=%SYSEVALF(&NONRESPONDERS/%SYSEVALF(&RESPONDERS+&NONRESPONDERS));
%PUT &PROP_RESPONDERS &PROP_NONRESPONDERS;

*ASSIGN GLOBAL VARIABLES;

DM "OUTPUT" CLEAR;
%LET SEED=3000;
%LET TRAIN_TEST=0.7;

*CREATE TRAINING AND TESTING/VALIDATION DATASETS FROM THE COMBINED SAMPLE. 
 ALSO CREATE THE OFFSET VARIABLE TO ADJUST THE INTERCEPT FOR BALANCING;

DATA DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 SET DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 RANDOM_NO=RANUNI(&SEED);
 TRAINING=0; TESTING=0;
 IF RANDOM_NO<=&TRAIN_TEST THEN TRAINING=1;
 IF RANDOM_NO>&TRAIN_TEST THEN TESTING=1;
RUN;


*CREATE A BALANCED SAMPLE FOR RESPONDERS AND NONRESPONDERS;

DATA DATALIB.ON_ALLCAMPAIGNS_RESPONDERS;
 SET DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 WHERE RESPONDER=1;
 DROP RANDOM_NO;
RUN;

DATA DATALIB.ON_ALLCAMPAIGNS_NONRESPONDERS;
 SET DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 WHERE RESPONDER=0;
 RANDOM_NO=RANUNI(&SEED);
RUN;

PROC SORT DATA=DATALIB.ON_ALLCAMPAIGNS_NONRESPONDERS 
		  OUT=ON_ALLCAMPAIGNS_NONRESPONDERS;
 BY RANDOM_NO;
RUN;

DATA ON_ALLCAMPAIGNS_NONRESPONDERS;
 SET ON_ALLCAMPAIGNS_NONRESPONDERS;
 IF _N_<=ROUND(&RESPONDERS);
 DROP RANDOM_NO;
RUN;

DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED;
 SET DATALIB.ON_ALLCAMPAIGNS_RESPONDERS;
RUN;

PROC APPEND BASE=DATALIB.ON_ALLCAMPAIGNS_BALANCED
            DATA=ON_ALLCAMPAIGNS_NONRESPONDERS FORCE;
RUN;

PROC FREQ DATA=DATALIB.ON_ALLCAMPAIGNS_BALANCED;
 TABLE RESPONDER;
RUN;

*FIND PROPORTION OF RESPONDERS AND NON RESPONDERS IN THE BALANCED SAMPLE AND STORE THE VALUES IN GLOBAL VARIABLES;

PROC SQL;
 SELECT COUNT(*) INTO: RESPONDERS_BAL FROM DATALIB.ON_ALLCAMPAIGNS_BALANCED WHERE RESPONDER=1;
 SELECT COUNT(*) INTO: NONRESPONDERS_BAL FROM DATALIB.ON_ALLCAMPAIGNS_BALANCED WHERE RESPONDER=0;
QUIT;

%LET PROP_RESPONDERS_BAL=%SYSEVALF(&RESPONDERS_BAL/%SYSEVALF(&RESPONDERS_BAL+&NONRESPONDERS_BAL));
%LET PROP_NONRESPONDERS_BAL=%SYSEVALF(&NONRESPONDERS_BAL/%SYSEVALF(&RESPONDERS_BAL+&NONRESPONDERS_BAL));
%PUT &PROP_RESPONDERS_BAL &PROP_NONRESPONDERS_BAL;

DATA DATALIB.ON_ALLCAMPAIGNS_RESP_PROP;
 PROP_RESPONDERS_BAL = &PROP_RESPONDERS_BAL;
 PROP_NONRESPONDERS_BAL = &PROP_NONRESPONDERS_BAL;
 PROP_RESPONDERS = &PROP_RESPONDERS;
 PROP_NONRESPONDERS = &PROP_NONRESPONDERS;
RUN;


DATA DATALIB.ON_ALLCAMPAIGNS_RESP_PROP;
 SET DATALIB.ON_ALLCAMPAIGNS_RESP_PROP;
 CALL SYMPUT ("PROP_RESPONDERS", PROP_RESPONDERS);
 CALL SYMPUT ("PROP_RESPONDERS_BAL", PROP_RESPONDERS_BAL);
 CALL SYMPUT ("PROP_NONRESPONDERS", PROP_NONRESPONDERS);
 CALL SYMPUT ("PROP_NONRESPONDERS_BAL", PROP_NONRESPONDERS_BAL);
RUN;


DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED;
 
 LENGTH_PROMO = END_DT - START_DT + 1;

 IF RESPONDER=1 THEN WT=&PROP_RESPONDERS/&PROP_RESPONDERS_BAL;
 IF RESPONDER=0 THEN WT=&PROP_NONRESPONDERS/&PROP_NONRESPONDERS_BAL;

 NET_SALES_AMT_12MO_SLS=GROSS_SALES_AMT_12MO_SLS+DISCOUNT_AMT_12MO_SLS;
 NET_SALES_AMT_12MO_SLS_CP=GROSS_SALES_AMT_12MO_SLS_CP+DISCOUNT_AMT_12MO_SLS_CP;
 NET_SALES_AMT_12MO_SLS_OTH=NET_SALES_AMT_12MO_SLS_CP-NET_SALES_AMT_12MO_SLS;

 NET_SALES_AMT_12MO_RTN = -(GROSS_SALES_AMT_12MO_RTN+DISCOUNT_AMT_12MO_RTN);
 NET_SALES_AMT_12MO_RTN_CP = -(GROSS_SALES_AMT_12MO_RTN_CP+DISCOUNT_AMT_12MO_RTN_CP);
 NET_SALES_AMT_12MO_RTN_OTH = NET_SALES_AMT_12MO_RTN_CP - NET_SALES_AMT_12MO_RTN;

 UNITS_PER_TXN_12MO_SLS=0;
 IF NUM_TXNS_12MO_SLS NE 0 THEN 
	UNITS_PER_TXN_12MO_SLS=ITEM_QTY_12MO_SLS/NUM_TXNS_12MO_SLS;

 AVG_ORD_SZ_12MO=0;
 IF NUM_TXNS_12MO_SLS NE 0 THEN 
	AVG_ORD_SZ_12MO=GROSS_SALES_AMT_12MO_SLS/NUM_TXNS_12MO_SLS;

 AVG_ORD_SZ_12MO_CP=0;
 IF NUM_TXNS_12MO_SLS_CP NE 0 THEN 
	AVG_ORD_SZ_12MO_CP=GROSS_SALES_AMT_12MO_SLS_CP/NUM_TXNS_12MO_SLS_CP;
 
 DISCOUNT_PCT_12MO=0; DISCOUNT_PCT_6MO=0;
 IF GROSS_SALES_AMT_12MO_SLS NE 0 THEN 
 	DISCOUNT_PCT_12MO=-DISCOUNT_AMT_12MO_SLS/GROSS_SALES_AMT_12MO_SLS * 100;

 IF GROSS_SALES_AMT_6MO_SLS NE 0 THEN
 	DISCOUNT_PCT_6MO=-DISCOUNT_AMT_6MO_SLS/GROSS_SALES_AMT_6MO_SLS * 100;

 PLCC_TXN_PCT=0;
 IF NUM_TXNS_12MO_SLS NE 0 THEN
 	PLCC_TXN_PCT=NUM_PLCC_TXNS_12MO_SLS/NUM_TXNS_12MO_SLS * 100;

 AVG_UNT_RTL=0;
 IF ITEM_QTY_12MO_SLS NE 0 THEN 
 AVG_UNT_RTL=NET_SALES_AMT_12MO_SLS/ITEM_QTY_12MO_SLS;
 
 AVG_UNT_RTL_CP=0;
 IF ITEM_QTY_12MO_SLS_CP NE 0 THEN 
 AVG_UNT_RTL_CP=NET_SALES_AMT_12MO_SLS_CP/ITEM_QTY_12MO_SLS_CP;

 RATIO_NET_RTN_NET_SLS=0;
 IF NET_SALES_AMT_12MO_SLS NE 0 THEN
 RATIO_NET_RTN_NET_SLS=NET_SALES_AMT_12MO_RTN/NET_SALES_AMT_12MO_SLS;

 YEARS_ON_BOOKS=DAYS_ON_BOOKS_CP/365; LENGTH_PROMO=DATEPART(END_DT)-DATEPART(START_DT)+1;

 OFFSET=LOG((&PROP_NONRESPONDERS * &PROP_RESPONDERS_BAL)/(&PROP_RESPONDERS * &PROP_NONRESPONDERS_BAL));
 
RUN;

DATA DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 SET DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 
 LENGTH_PROMO = END_DT - START_DT + 1;

 IF RESPONDER=1 THEN WT=&PROP_RESPONDERS/&PROP_RESPONDERS_BAL;
 IF RESPONDER=0 THEN WT=&PROP_NONRESPONDERS/&PROP_NONRESPONDERS_BAL;

 NET_SALES_AMT_12MO_SLS=GROSS_SALES_AMT_12MO_SLS+DISCOUNT_AMT_12MO_SLS;
 NET_SALES_AMT_12MO_SLS_CP=GROSS_SALES_AMT_12MO_SLS_CP+DISCOUNT_AMT_12MO_SLS_CP;
 NET_SALES_AMT_12MO_SLS_OTH=NET_SALES_AMT_12MO_SLS_CP-NET_SALES_AMT_12MO_SLS;

 NET_SALES_AMT_12MO_RTN = -(GROSS_SALES_AMT_12MO_RTN+DISCOUNT_AMT_12MO_RTN);
 NET_SALES_AMT_12MO_RTN_CP = -(GROSS_SALES_AMT_12MO_RTN_CP+DISCOUNT_AMT_12MO_RTN_CP);
 NET_SALES_AMT_12MO_RTN_OTH = NET_SALES_AMT_12MO_RTN_CP-NET_SALES_AMT_12MO_RTN;

 UNITS_PER_TXN_12MO_SLS=0;
 IF NUM_TXNS_12MO_SLS NE 0 THEN 
	UNITS_PER_TXN_12MO_SLS=ITEM_QTY_12MO_SLS/NUM_TXNS_12MO_SLS;

 AVG_ORD_SZ_12MO=0;
 IF NUM_TXNS_12MO_SLS NE 0 THEN 
	AVG_ORD_SZ_12MO=GROSS_SALES_AMT_12MO_SLS/NUM_TXNS_12MO_SLS;

 AVG_ORD_SZ_12MO_CP=0;
 IF NUM_TXNS_12MO_SLS_CP NE 0 THEN 
	AVG_ORD_SZ_12MO_CP=GROSS_SALES_AMT_12MO_SLS_CP/NUM_TXNS_12MO_SLS_CP;
 
 DISCOUNT_PCT_12MO=0; DISCOUNT_PCT_6MO=0;
 IF GROSS_SALES_AMT_12MO_SLS NE 0 THEN 
 	DISCOUNT_PCT_12MO=-DISCOUNT_AMT_12MO_SLS/GROSS_SALES_AMT_12MO_SLS * 100;

 IF GROSS_SALES_AMT_6MO_SLS NE 0 THEN
 	DISCOUNT_PCT_6MO=-DISCOUNT_AMT_6MO_SLS/GROSS_SALES_AMT_6MO_SLS * 100;

 PLCC_TXN_PCT=0;
 IF NUM_TXNS_12MO_SLS NE 0 THEN
 	PLCC_TXN_PCT=NUM_PLCC_TXNS_12MO_SLS/NUM_TXNS_12MO_SLS * 100;

 AVG_UNT_RTL=0;
 IF ITEM_QTY_12MO_SLS NE 0 THEN 
 AVG_UNT_RTL=NET_SALES_AMT_12MO_SLS/ITEM_QTY_12MO_SLS;
 
 AVG_UNT_RTL_CP=0;
 IF ITEM_QTY_12MO_SLS_CP NE 0 THEN 
 AVG_UNT_RTL_CP=NET_SALES_AMT_12MO_SLS_CP/ITEM_QTY_12MO_SLS_CP;

 RATIO_NET_RTN_NET_SLS=0;
 IF NET_SALES_AMT_12MO_SLS NE 0 THEN
 RATIO_NET_RTN_NET_SLS=NET_SALES_AMT_12MO_RTN/NET_SALES_AMT_12MO_SLS;

 YEARS_ON_BOOKS=DAYS_ON_BOOKS_CP/365; LENGTH_PROMO=DATEPART(END_DT)-DATEPART(START_DT)+1;

 OFFSET=LOG((&PROP_NONRESPONDERS * &PROP_RESPONDERS_BAL)/(&PROP_RESPONDERS * &PROP_NONRESPONDERS_BAL));


RUN;

PROC FREQ DATA=DATALIB.ON_ALLCAMPAIGNS_BALANCED;
 TABLE RESPONDER;
 WEIGHT WT;
RUN;



PROC UNIVARIATE DATA=DATALIB.ON_ALLCAMPAIGNS_COMBINED;
 VAR AVG_ORD_SZ_12MO_CP  AVG_ORD_SZ_12MO ONSALE_QTY_12MO
	 NET_SALES_AMT_12MO_RTN NET_SALES_AMT_12MO_SLS 
	 AVG_UNT_RTL_CP	AVG_UNT_RTL DISCOUNT_PCT_12MO YEARS_ON_BOOKS 
	 UNITS_PER_TXN_12MO_SLS NUM_TXNS_12MO_SLS  NUM_TXNS_12MO_RTN
     DIV_SHP_ON ON_PROMOTIONS_RECEIVED_12MO ONSALE_QTY_6MO
	 DAYS_LAST_PUR_ON DAYS_LAST_PUR_CP PLCC_TXN_PCT NUM_PLCC_TXNS_12MO_SLS;
     
OUTPUT OUT=DATALIB.ON_ALLCAMPAIGNS_COMBINED_PCTL
	   PCTLPRE = AVG_ORD_SZ_12MO_CP_ AVG_ORD_SZ_12MO_ ONSALE_QTY_12MO_ 
				 NET_SALES_AMT_12MO_RTN_ NET_SALES_AMT_12MO_SLS_ 
				 AVG_UNT_RTL_CP_  AVG_UNT_RTL_ DISCOUNT_PCT_12MO_ YEARS_ON_BOOKS_ 
				 UNITS_PER_TXN_12MO_SLS_ NUM_TXNS_12MO_SLS_ NUM_TXNS_12MO_RTN_
     			 DIV_SHP_ON_ ON_PROMOTIONS_RECEIVED_12MO_ ONSALE_QTY_6MO_
				 DAYS_LAST_PUR_ON_ DAYS_LAST_PUR_CP_ PLCC_TXN_PCT_ NUM_PLCC_TXNS_12MO_SLS_
	   PCTLPTS= 0 0.3 0.5 1 50 99 99.5 99.7 100;
RUN;



DATA ON_ALLCAMPAIGNS_BALANCED_1;
 KEEP NET_SALES_AMT AVG_ORD_SZ_12MO_CP AVG_ORD_SZ_12MO
	  ONSALE_QTY_12MO NET_SALES_AMT_12MO_RTN NET_SALES_AMT_12MO_SLS 
	  AVG_UNT_RTL_CP AVG_UNT_RTL DISCOUNT_PCT_12MO YEARS_ON_BOOKS 
	  UNITS_PER_TXN_12MO_SLS NUM_TXNS_12MO_SLS  NUM_TXNS_12MO_RTN
      DIV_SHP_ON ON_PROMOTIONS_RECEIVED_12MO ONSALE_QTY_6MO TESTING
	  TREATMENT_GROUP CUSTOMER_KEY RESPONDER TRAINING CAMPAIGN OFFSET  
	  WT TREATMENT_CODE DAYS_LAST_PUR_ON DAYS_LAST_PUR_CP LENGTH_PROMO
	  PLCC_TXN_PCT NUM_PLCC_TXNS_12MO_SLS CAMPAIGN_NAME RESPONSE_RATE_12MO
	  ON_PROMOTIONS_RESPONDED_12MO BASIC_FLAG SILVER_FLAG SISTER_FLAG 
	  CARD_STATUS; 
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED;
 WHERE TREATMENT_GROUP=1;
RUN;

DATA DATALIB.ON_ALLCAMPAIGNS_COMBINED_PCTL;
SET DATALIB.ON_ALLCAMPAIGNS_COMBINED_PCTL;

 CALL SYMPUT ("AVG_ORD_SZ_12MO_CP_LC", AVG_ORD_SZ_12MO_CP_0_5);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_CP_50", AVG_ORD_SZ_12MO_CP_50);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_CP_UC", AVG_ORD_SZ_12MO_CP_99_5);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_LC", AVG_ORD_SZ_12MO_0_5);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_50", AVG_ORD_SZ_12MO_50);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_UC", AVG_ORD_SZ_12MO_99_5);
 CALL SYMPUT ("ONSALE_QTY_12MO_LC", ONSALE_QTY_12MO_0_5);
 CALL SYMPUT ("ONSALE_QTY_12MO_50", ONSALE_QTY_12MO_50);
 CALL SYMPUT ("ONSALE_QTY_12MO_UC", ONSALE_QTY_12MO_99_5);
 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_LC", NET_SALES_AMT_12MO_RTN_0_5);
 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_50", NET_SALES_AMT_12MO_RTN_50);
 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_UC", NET_SALES_AMT_12MO_RTN_99_5);
 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_LC", NET_SALES_AMT_12MO_SLS_0_5);
 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_50", NET_SALES_AMT_12MO_SLS_50);
 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_UC", NET_SALES_AMT_12MO_SLS_99_5);
 CALL SYMPUT ("AVG_UNT_RTL_CP_LC", AVG_UNT_RTL_CP_0_5);
 CALL SYMPUT ("AVG_UNT_RTL_CP_50", AVG_UNT_RTL_CP_50);
 CALL SYMPUT ("AVG_UNT_RTL_CP_UC", AVG_UNT_RTL_CP_99_5);
 CALL SYMPUT ("AVG_UNT_RTL_LC", AVG_UNT_RTL_0_5);
 CALL SYMPUT ("AVG_UNT_RTL_50", AVG_UNT_RTL_50);
 CALL SYMPUT ("AVG_UNT_RTL_UC", AVG_UNT_RTL_99_5);
 CALL SYMPUT ("DISCOUNT_PCT_12MO_LC", DISCOUNT_PCT_12MO_0_5);
 CALL SYMPUT ("DISCOUNT_PCT_12MO_50", DISCOUNT_PCT_12MO_50);
 CALL SYMPUT ("DISCOUNT_PCT_12MO_UC", DISCOUNT_PCT_12MO_99_5);
 CALL SYMPUT ("YEARS_ON_BOOKS_LC", YEARS_ON_BOOKS_0_5);
 CALL SYMPUT ("YEARS_ON_BOOKS_50", YEARS_ON_BOOKS_50);
 CALL SYMPUT ("YEARS_ON_BOOKS_UC", YEARS_ON_BOOKS_99_5);
 CALL SYMPUT ("UNITS_PER_TXN_12MO_SLS_LC", UNITS_PER_TXN_12MO_SLS_0_5);
 CALL SYMPUT ("UNITS_PER_TXN_12MO_SLS_50", UNITS_PER_TXN_12MO_SLS_50);
 CALL SYMPUT ("UNITS_PER_TXN_12MO_SLS_UC", UNITS_PER_TXN_12MO_SLS_99_5);
 CALL SYMPUT ("NUM_TXNS_12MO_SLS_LC", NUM_TXNS_12MO_SLS_0_5);
 CALL SYMPUT ("NUM_TXNS_12MO_SLS_50", NUM_TXNS_12MO_SLS_50);
 CALL SYMPUT ("NUM_TXNS_12MO_SLS_UC", NUM_TXNS_12MO_SLS_99_5); 
 CALL SYMPUT ("NUM_TXNS_12MO_RTN_LC", NUM_TXNS_12MO_RTN_0_5); 
 CALL SYMPUT ("NUM_TXNS_12MO_RTN_50", NUM_TXNS_12MO_RTN_50);
 CALL SYMPUT ("NUM_TXNS_12MO_RTN_UC", NUM_TXNS_12MO_RTN_99_5);
 CALL SYMPUT ("DIV_SHP_ON_LC", DIV_SHP_ON_0);
 CALL SYMPUT ("DIV_SHP_ON_50", DIV_SHP_ON_50);
 CALL SYMPUT ("DIV_SHP_ON_UC", DIV_SHP_ON_100);
 CALL SYMPUT ("ON_PROMOTIONS_RECEIVED_12MO_LC", ON_PROMOTIONS_RECEIVED_12MO_0_5);
 CALL SYMPUT ("ON_PROMOTIONS_RECEIVED_12MO_50", ON_PROMOTIONS_RECEIVED_12MO_50);
 CALL SYMPUT ("ON_PROMOTIONS_RECEIVED_12MO_UC", ON_PROMOTIONS_RECEIVED_12MO_99_5);
 CALL SYMPUT ("ONSALE_QTY_6MO_LC", ONSALE_QTY_6MO_0_5);
 CALL SYMPUT ("ONSALE_QTY_6MO_50", ONSALE_QTY_6MO_50);
 CALL SYMPUT ("ONSALE_QTY_6MO_UC", ONSALE_QTY_6MO_99_5); 
 CALL SYMPUT ("DAYS_LAST_PUR_ON_LC", DAYS_LAST_PUR_ON_0_5);
 CALL SYMPUT ("DAYS_LAST_PUR_ON_50", DAYS_LAST_PUR_ON_50);
 CALL SYMPUT ("DAYS_LAST_PUR_ON_UC", DAYS_LAST_PUR_ON_99_5);
 CALL SYMPUT ("DAYS_LAST_PUR_CP_LC", DAYS_LAST_PUR_CP_0_5);
 CALL SYMPUT ("DAYS_LAST_PUR_CP_50", DAYS_LAST_PUR_CP_50);
 CALL SYMPUT ("DAYS_LAST_PUR_CP_UC", DAYS_LAST_PUR_CP_99_5); 
 CALL SYMPUT ("PLCC_TXN_PCT_LC", PLCC_TXN_PCT_0_5);
 CALL SYMPUT ("PLCC_TXN_PCT_50", PLCC_TXN_PCT_50);
 CALL SYMPUT ("PLCC_TXN_PCT_UC", PLCC_TXN_PCT_99_5); 
 CALL SYMPUT ("NUM_PLCC_TXNS_12MO_SLS_LC", NUM_PLCC_TXNS_12MO_SLS_0_5);
 CALL SYMPUT ("NUM_PLCC_TXNS_12MO_SLS_50", NUM_PLCC_TXNS_12MO_SLS_50);
 CALL SYMPUT ("NUM_PLCC_TXNS_12MO_SLS_UC", NUM_PLCC_TXNS_12MO_SLS_99_5); 

RUN;


DATA ON_ALLCAMPAIGNS_BALANCED_2;
SET ON_ALLCAMPAIGNS_BALANCED_1;

IF AVG_ORD_SZ_12MO_CP > &AVG_ORD_SZ_12MO_CP_UC THEN AVG_ORD_SZ_12MO_CP = &AVG_ORD_SZ_12MO_CP_UC;
IF AVG_ORD_SZ_12MO > &AVG_ORD_SZ_12MO_UC THEN AVG_ORD_SZ_12MO = &AVG_ORD_SZ_12MO_UC;
IF ONSALE_QTY_12MO > &ONSALE_QTY_12MO_UC THEN ONSALE_QTY_12MO = &ONSALE_QTY_12MO_UC;
IF NET_SALES_AMT_12MO_RTN > &NET_SALES_AMT_12MO_RTN_UC THEN NET_SALES_AMT_12MO_RTN = &NET_SALES_AMT_12MO_RTN_UC;
IF NET_SALES_AMT_12MO_SLS > &NET_SALES_AMT_12MO_SLS_UC THEN NET_SALES_AMT_12MO_SLS = &NET_SALES_AMT_12MO_SLS_UC;
IF AVG_UNT_RTL_CP > &AVG_UNT_RTL_CP_UC THEN AVG_UNT_RTL_CP = &AVG_UNT_RTL_CP_UC;
IF AVG_UNT_RTL > &AVG_UNT_RTL_UC THEN AVG_UNT_RTL = &AVG_UNT_RTL_UC;
IF DISCOUNT_PCT_12MO > &DISCOUNT_PCT_12MO_UC THEN DISCOUNT_PCT_12MO = &DISCOUNT_PCT_12MO_UC;
IF YEARS_ON_BOOKS > &YEARS_ON_BOOKS_UC THEN YEARS_ON_BOOKS = &YEARS_ON_BOOKS_UC;
IF UNITS_PER_TXN_12MO_SLS > &UNITS_PER_TXN_12MO_SLS_UC THEN UNITS_PER_TXN_12MO_SLS = &UNITS_PER_TXN_12MO_SLS_UC;
IF NUM_TXNS_12MO_SLS > &NUM_TXNS_12MO_SLS_UC THEN NUM_TXNS_12MO_SLS = &NUM_TXNS_12MO_SLS_UC;
IF NUM_TXNS_12MO_RTN > &NUM_TXNS_12MO_RTN_UC THEN NUM_TXNS_12MO_RTN = &NUM_TXNS_12MO_RTN_UC;
IF DIV_SHP_ON > &DIV_SHP_ON_UC THEN DIV_SHP_ON = &DIV_SHP_ON_UC;
IF ON_PROMOTIONS_RECEIVED_12MO > &ON_PROMOTIONS_RECEIVED_12MO_UC THEN ON_PROMOTIONS_RECEIVED_12MO = &ON_PROMOTIONS_RECEIVED_12MO_UC;
IF ONSALE_QTY_6MO > &ONSALE_QTY_6MO_UC THEN ONSALE_QTY_6MO = &ONSALE_QTY_6MO_UC;
IF DAYS_LAST_PUR_CP > &DAYS_LAST_PUR_CP_UC THEN DAYS_LAST_PUR_CP = &DAYS_LAST_PUR_CP_UC;
IF DAYS_LAST_PUR_ON > &DAYS_LAST_PUR_ON_UC THEN DAYS_LAST_PUR_ON = &DAYS_LAST_PUR_ON_UC;
IF PLCC_TXN_PCT > &PLCC_TXN_PCT_UC THEN PLCC_TXN_PCT = &PLCC_TXN_PCT_UC;
IF NUM_PLCC_TXNS_12MO_SLS > &NUM_PLCC_TXNS_12MO_SLS_UC THEN NUM_PLCC_TXNS_12MO_SLS = &NUM_PLCC_TXNS_12MO_SLS_UC;


IF AVG_ORD_SZ_12MO_CP < &AVG_ORD_SZ_12MO_CP_LC THEN AVG_ORD_SZ_12MO_CP = &AVG_ORD_SZ_12MO_CP_LC;
IF AVG_ORD_SZ_12MO < &AVG_ORD_SZ_12MO_LC THEN AVG_ORD_SZ_12MO = &AVG_ORD_SZ_12MO_LC;
IF ONSALE_QTY_12MO < &ONSALE_QTY_12MO_LC THEN ONSALE_QTY_12MO = &ONSALE_QTY_12MO_LC;
IF NET_SALES_AMT_12MO_RTN < &NET_SALES_AMT_12MO_RTN_LC THEN NET_SALES_AMT_12MO_RTN = &NET_SALES_AMT_12MO_RTN_LC;
IF NET_SALES_AMT_12MO_SLS < &NET_SALES_AMT_12MO_SLS_LC THEN NET_SALES_AMT_12MO_SLS = &NET_SALES_AMT_12MO_SLS_LC;
IF AVG_UNT_RTL_CP < &AVG_UNT_RTL_CP_LC THEN AVG_UNT_RTL_CP = &AVG_UNT_RTL_CP_LC;
IF AVG_UNT_RTL < &AVG_UNT_RTL_LC THEN AVG_UNT_RTL = &AVG_UNT_RTL_LC;
IF DISCOUNT_PCT_12MO < &DISCOUNT_PCT_12MO_LC THEN DISCOUNT_PCT_12MO = &DISCOUNT_PCT_12MO_LC;
IF YEARS_ON_BOOKS < &YEARS_ON_BOOKS_LC THEN YEARS_ON_BOOKS = &YEARS_ON_BOOKS_LC;
IF UNITS_PER_TXN_12MO_SLS < &UNITS_PER_TXN_12MO_SLS_LC THEN UNITS_PER_TXN_12MO_SLS = &UNITS_PER_TXN_12MO_SLS_LC;
IF NUM_TXNS_12MO_SLS < &NUM_TXNS_12MO_SLS_LC THEN NUM_TXNS_12MO_SLS = &NUM_TXNS_12MO_SLS_LC;
IF NUM_TXNS_12MO_RTN < &NUM_TXNS_12MO_RTN_LC THEN NUM_TXNS_12MO_RTN = &NUM_TXNS_12MO_RTN_LC;
IF DIV_SHP_ON < &DIV_SHP_ON_LC THEN DIV_SHP_ON = &DIV_SHP_ON_LC;
IF ON_PROMOTIONS_RECEIVED_12MO < &ON_PROMOTIONS_RECEIVED_12MO_LC THEN ON_PROMOTIONS_RECEIVED_12MO = &ON_PROMOTIONS_RECEIVED_12MO_LC;
IF ONSALE_QTY_6MO < &ONSALE_QTY_6MO_LC THEN ONSALE_QTY_6MO = &ONSALE_QTY_6MO_LC;
IF DAYS_LAST_PUR_CP < &DAYS_LAST_PUR_CP_LC THEN DAYS_LAST_PUR_CP = &DAYS_LAST_PUR_CP_LC;
IF DAYS_LAST_PUR_ON < &DAYS_LAST_PUR_ON_LC THEN DAYS_LAST_PUR_ON = &DAYS_LAST_PUR_ON_LC;
IF PLCC_TXN_PCT < &PLCC_TXN_PCT_LC THEN PLCC_TXN_PCT = &PLCC_TXN_PCT_LC;
IF NUM_PLCC_TXNS_12MO_SLS < &NUM_PLCC_TXNS_12MO_SLS_LC THEN NUM_PLCC_TXNS_12MO_SLS = &NUM_PLCC_TXNS_12MO_SLS_LC;

RUN;

DATA ON_ALLCAMPAIGNS_BALANCED_3;
SET ON_ALLCAMPAIGNS_BALANCED_2;

AVG_ORD_SZ_12MO_CP = (AVG_ORD_SZ_12MO_CP - &AVG_ORD_SZ_12MO_CP_LC) / (&AVG_ORD_SZ_12MO_CP_UC - &AVG_ORD_SZ_12MO_CP_LC);
AVG_ORD_SZ_12MO = (AVG_ORD_SZ_12MO - &AVG_ORD_SZ_12MO_LC) / (&AVG_ORD_SZ_12MO_UC - &AVG_ORD_SZ_12MO_LC);
ONSALE_QTY_12MO = (ONSALE_QTY_12MO - &ONSALE_QTY_12MO_LC) / (&ONSALE_QTY_12MO_UC - &ONSALE_QTY_12MO_LC);
NET_SALES_AMT_12MO_RTN = (NET_SALES_AMT_12MO_RTN - &NET_SALES_AMT_12MO_RTN_LC) / (&NET_SALES_AMT_12MO_RTN_UC - &NET_SALES_AMT_12MO_RTN_LC);
NET_SALES_AMT_12MO_SLS = (NET_SALES_AMT_12MO_SLS - &NET_SALES_AMT_12MO_SLS_LC) / (&NET_SALES_AMT_12MO_SLS_UC - &NET_SALES_AMT_12MO_SLS_LC);
AVG_UNT_RTL_CP = (AVG_UNT_RTL_CP - &AVG_UNT_RTL_CP_LC) / (&AVG_UNT_RTL_CP_UC - &AVG_UNT_RTL_CP_LC);
AVG_UNT_RTL = (AVG_UNT_RTL - &AVG_UNT_RTL_LC) / (&AVG_UNT_RTL_UC - &AVG_UNT_RTL_LC);
DISCOUNT_PCT_12MO = (DISCOUNT_PCT_12MO - &DISCOUNT_PCT_12MO_LC) / (&DISCOUNT_PCT_12MO_UC - &DISCOUNT_PCT_12MO_LC);
YEARS_ON_BOOKS = (YEARS_ON_BOOKS - &YEARS_ON_BOOKS_LC) / (&YEARS_ON_BOOKS_UC - &YEARS_ON_BOOKS_LC);
UNITS_PER_TXN_12MO_SLS = (UNITS_PER_TXN_12MO_SLS - &UNITS_PER_TXN_12MO_SLS_LC) / (&UNITS_PER_TXN_12MO_SLS_UC - &UNITS_PER_TXN_12MO_SLS_LC);
NUM_TXNS_12MO_SLS = (NUM_TXNS_12MO_SLS - &NUM_TXNS_12MO_SLS_LC) / (&NUM_TXNS_12MO_SLS_UC - &NUM_TXNS_12MO_SLS_LC);
NUM_TXNS_12MO_RTN = (NUM_TXNS_12MO_RTN - &NUM_TXNS_12MO_RTN_LC) / (&NUM_TXNS_12MO_RTN_UC - &NUM_TXNS_12MO_RTN_LC);
DIV_SHP_ON = (DIV_SHP_ON - &DIV_SHP_ON_LC) / (&DIV_SHP_ON_UC - &DIV_SHP_ON_LC);
ON_PROMOTIONS_RECEIVED_12MO = (ON_PROMOTIONS_RECEIVED_12MO - &ON_PROMOTIONS_RECEIVED_12MO_LC) / (&ON_PROMOTIONS_RECEIVED_12MO_UC - &ON_PROMOTIONS_RECEIVED_12MO_LC);
ONSALE_QTY_6MO = (ONSALE_QTY_6MO - &ONSALE_QTY_6MO_LC) / (&ONSALE_QTY_6MO_UC - &ONSALE_QTY_6MO_LC);
DAYS_LAST_PUR_ON = (DAYS_LAST_PUR_ON - &DAYS_LAST_PUR_ON_LC) / (&DAYS_LAST_PUR_ON_UC - &DAYS_LAST_PUR_ON_LC);
DAYS_LAST_PUR_CP = (DAYS_LAST_PUR_CP - &DAYS_LAST_PUR_CP_LC) / (&DAYS_LAST_PUR_CP_UC - &DAYS_LAST_PUR_CP_LC);
PLCC_TXN_PCT = (PLCC_TXN_PCT - &PLCC_TXN_PCT_LC) / (&PLCC_TXN_PCT_UC - &PLCC_TXN_PCT_LC);
NUM_PLCC_TXNS_12MO_SLS = (NUM_PLCC_TXNS_12MO_SLS - &NUM_PLCC_TXNS_12MO_SLS_LC) / (&NUM_PLCC_TXNS_12MO_SLS_UC - &NUM_PLCC_TXNS_12MO_SLS_LC);

RUN;


PROC EXPORT DATA=ON_ALLCAMPAIGNS_BALANCED_3
			OUTFILE="Z:\TANUMOY\DATASETS\MODEL REPLICATION\ON_ALLCAMPAIGNS_BALANCED_3.TXT"
            DBMS=DLM REPLACE;
     DELIMITER="|";
RUN;

DM "OUTPUT" CLEAR;

DATA ON_ALLCAMPAIGNS_BALANCED_3;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED_MOD;
RUN;




PROC REG DATA=ON_ALLCAMPAIGNS_BALANCED_3;
 MODEL  RESPONDER   =	NUM_TXNS_12MO_SLS  DIV_SHP_ON PLCC_TXN_PCT
						ON_PROMOTIONS_RECEIVED_12MO DAYS_LAST_PUR_ON
						AVG_ORD_SZ_12MO NUM_TXNS_12MO_RTN ONSALE_QTY_12MO
	  /VIF;
 WHERE TRAINING=1;
RUN;
QUIT;

PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_3
              OUTEST=DATALIB.ON_ALLCAMPAIGNS_BALANCED_PARMS_1
              OUTMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_1;
 MODEL   RESPONDER(REF="0")  =	NUM_TXNS_12MO_SLS  DIV_SHP_ON PLCC_TXN_PCT
								ON_PROMOTIONS_RECEIVED_12MO DAYS_LAST_PUR_ON
								AVG_ORD_SZ_12MO ONSALE_QTY_12MO
      /EXPB LACKFIT CTABLE OFFSET=OFFSET;
 OUTPUT OUT=ON_ALLCAMPAIGNS_BALANCED_FITS_1 PREDICTED=P_FIXED XBETA=L_FIXED;
 WHERE TRAINING=1;
RUN;


PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_3
              OUTEST=DATALIB.ON_ALLCAMPAIGNS_BALANCED_PARMS_2
              OUTMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_2;
 CLASS CARD_STATUS (REF='4');
 MODEL   RESPONDER(REF="0")  =	NUM_TXNS_12MO_SLS  DIV_SHP_ON PLCC_TXN_PCT
								ON_PROMOTIONS_RECEIVED_12MO DAYS_LAST_PUR_ON
								AVG_ORD_SZ_12MO ONSALE_QTY_12MO CARD_STATUS
								RESPONSE_RATE_12MO
								/EXPB LACKFIT CTABLE OFFSET=OFFSET;
 
 OUTPUT OUT=ON_ALLCAMPAIGNS_BALANCED_FITS_2 PREDICTED=P_FIXED XBETA=L_FIXED;
 WHERE TRAINING=1;
RUN;


PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_3
              OUTEST=DATALIB.ON_ALLCAMPAIGNS_BALANCED_PARMS_3
              OUTMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_3;
 CLASS CARD_STATUS (REF='3');
 MODEL   RESPONDER(REF="0")  =	NUM_TXNS_12MO_SLS  DIV_SHP_ON PLCC_TXN_PCT
								ON_PROMOTIONS_RECEIVED_12MO DAYS_LAST_PUR_ON
								AVG_ORD_SZ_12MO ONSALE_QTY_12MO CARD_STATUS
								RESPONSE_RATE_12MO
								/EXPB LACKFIT CTABLE OFFSET=OFFSET;
 
 OUTPUT OUT=ON_ALLCAMPAIGNS_BALANCED_FITS_3 PREDICTED=P_FIXED XBETA=L_FIXED;
 WHERE TRAINING=1 AND CARD_STATUS NE 4;
RUN;


PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_3
              OUTEST=DATALIB.ON_ALLCAMPAIGNS_BALANCED_PARMS_4
              OUTMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_4;
 MODEL   RESPONDER(REF="0")  =	NUM_TXNS_12MO_SLS  DIV_SHP_ON PLCC_TXN_PCT
								ON_PROMOTIONS_RECEIVED_12MO DAYS_LAST_PUR_ON
								AVG_ORD_SZ_12MO ONSALE_QTY_12MO RESPONSE_RATE_12MO
								/EXPB LACKFIT CTABLE OFFSET=OFFSET;
 
 OUTPUT OUT=ON_ALLCAMPAIGNS_BALANCED_FITS_4 PREDICTED=P_FIXED XBETA=L_FIXED;
 WHERE TRAINING=1 AND CARD_STATUS EQ 4;
RUN;


PROC GLIMMIX DATA=ON_ALLCAMPAIGNS_BALANCED_3 OUTDESIGN = TEMP METHOD=MSPL;
 CLASS CARD_STATUS;
 MODEL RESPONDER (EVENT='1')
				 = NUM_TXNS_12MO_SLS  DIV_SHP_ON PLCC_TXN_PCT
				   ON_PROMOTIONS_RECEIVED_12MO DAYS_LAST_PUR_ON
				   AVG_ORD_SZ_12MO ONSALE_QTY_12MO RESPONSE_RATE_12MO
				   / SOLUTION DISTRIBUTION=BINARY LINK=LOGIT OFFSET=OFFSET;
 RANDOM INTERCEPT / SUBJECT = CARD_STATUS;
 OUTPUT OUT = ON_ALLCAMPAIGNS_BALANCED_FITS_5 PRED( BLUP ILINK) = P_MIXED
											  PRED( NOBLUP ILINK) = P_FIXED;
 ID CAMPAIGN CUSTOMER_KEY RESPONDER _XBETA_ _ZGAMMA_;
 WHERE TRAINING=1;
 ODS OUTPUT TESTS3 = ON_ALLCAMPAIGNS_TYPE3_TESTS
			COVPARMS = ON_ALLCAMPAIGNS_COVPARMS 
			PARAMETERESTIMATES = ON_ALLCAMPAIGNS_PARAMEST;
RUN;

*ADJUSTING THE PROBABILITIES DUE TO BALANCING USING THE OFFSET;
 
DATA ON_ALLCAMPAIGNS_BALANCED_FITS_1;
 SET ON_ALLCAMPAIGNS_BALANCED_FITS_1;
 P_1=EXP(L_FIXED)/(1+EXP(L_FIXED));
 POFFSET=LOGISTIC(L_FIXED-OFFSET);
 LABEL L_FIXED = "LOGIT";
 DROP P_FIXED;
RUN;


DATA ON_ALLCAMPAIGNS_BALANCED_FITS_2;
 SET ON_ALLCAMPAIGNS_BALANCED_FITS_2;
 P_1=EXP(L_FIXED)/(1+EXP(L_FIXED));
 POFFSET=LOGISTIC(L_FIXED-OFFSET);
 LABEL L_FIXED = "LOGIT";
 DROP P_FIXED;
RUN;


DATA ON_ALLCAMPAIGNS_BALANCED_FITS_3;
 SET ON_ALLCAMPAIGNS_BALANCED_FITS_3;
 P_1=EXP(L_FIXED)/(1+EXP(L_FIXED));
 POFFSET=LOGISTIC(L_FIXED-OFFSET);
 LABEL L_FIXED = "LOGIT";
 DROP P_FIXED;
RUN;

DATA ON_ALLCAMPAIGNS_BALANCED_FITS_4;
 SET ON_ALLCAMPAIGNS_BALANCED_FITS_4;
 P_1=EXP(L_FIXED)/(1+EXP(L_FIXED));
 POFFSET=LOGISTIC(L_FIXED-OFFSET);
 LABEL L_FIXED = "LOGIT";
 DROP P_FIXED;
RUN;

PROC APPEND BASE=ON_ALLCAMPAIGNS_BALANCED_FITS_3
			DATA=ON_ALLCAMPAIGNS_BALANCED_FITS_4
			FORCE;
RUN;

PROC SQL;
 DROP TABLE ON_ALLCAMPAIGNS_BALANCED_FITS_4;
QUIT;


PROC SQL UNDO_POLICY = NONE;
 CREATE TABLE ON_ALLCAMPAIGNS_BALANCED_FITS_4 AS SELECT T1.*, T2._XBETA_, T2._ZGAMMA_, T2.P_FIXED, T2.P_MIXED 
 		FROM ON_ALLCAMPAIGNS_BALANCED_3 T1,
			 ON_ALLCAMPAIGNS_BALANCED_FITS_5 T2
		WHERE T1.CAMPAIGN =T2.CAMPAIGN AND T1.CUSTOMER_KEY = T2.CUSTOMER_KEY
		ORDER BY T1.CAMPAIGN, T1.CUSTOMER_KEY;
QUIT;

DATA ON_ALLCAMPAIGNS_BALANCED_FITS_4;
 SET ON_ALLCAMPAIGNS_BALANCED_FITS_4;
 L_FIXED=P_FIXED/(1-P_FIXED); L_MIXED=P_MIXED/(1-P_MIXED); 
 POFFSET_FIXED=LOGISTIC(L_FIXED-OFFSET);
 POFFSET_MIXED=LOGISTIC(L_MIXED-OFFSET);
 LABEL P_FIXED = "P_FIXED";  LABEL P_MIXED = "P_MIXED"; 
RUN;

PROC SQL;
 DROP TABLE ON_ALLCAMPAIGNS_BALANCED_FITS_5;
QUIT;



PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_FITS_1;
 MODEL RESPONDER(EVENT='1') = POFFSET;
RUN;

PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_FITS_2;
 MODEL RESPONDER(EVENT='1') = POFFSET;
RUN;

PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_FITS_3;
 MODEL RESPONDER(EVENT='1') = POFFSET;
RUN;

PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_FITS_4;
 MODEL RESPONDER(EVENT='1') = POFFSET_FIXED;
RUN;

PROC LOGISTIC DATA=ON_ALLCAMPAIGNS_BALANCED_FITS_4;
 MODEL RESPONDER(EVENT='1') = POFFSET_MIXED;
RUN;


PROC LOGISTIC INMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_1;
 SCORE DATA= ON_ALLCAMPAIGNS_BALANCED_3 OUT=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_1;
RUN;


DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_1;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_1;
 IF P_1 NE 1;
 LOGIT=LOG(P_1) - LOG(1-P_1);
 POFFSET=LOGISTIC(LOGIT-OFFSET);
 DROP P_0;
RUN;


PROC LOGISTIC INMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_2;
 SCORE DATA= ON_ALLCAMPAIGNS_BALANCED_3 OUT=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_2;
RUN;


DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_2;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_2;
 IF P_1 NE 1;
 LOGIT=LOG(P_1) - LOG(1-P_1);
 POFFSET=LOGISTIC(LOGIT-OFFSET);
 DROP P_0;
RUN;

DATA ON_ALLCAMPAIGNS_BALANCED_3_TEMP;
 SET ON_ALLCAMPAIGNS_BALANCED_3;
 WHERE CARD_STATUS NE 4;
RUN;

PROC LOGISTIC INMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_3;
 SCORE DATA= ON_ALLCAMPAIGNS_BALANCED_3_TEMP OUT=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_3;
RUN;


DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_3;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_3;
 IF P_1 NE 1;
 LOGIT=LOG(P_1) - LOG(1-P_1);
 POFFSET=LOGISTIC(LOGIT-OFFSET);
 DROP P_0;
RUN;


DATA ON_ALLCAMPAIGNS_BALANCED_3_TEMP;
 SET ON_ALLCAMPAIGNS_BALANCED_3;
 WHERE CARD_STATUS EQ 4;
RUN;

PROC LOGISTIC INMODEL=DATALIB.ON_ALLCAMPAIGNS_BALANCED_MODEL_4;
 SCORE DATA= ON_ALLCAMPAIGNS_BALANCED_3_TEMP OUT=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
RUN;


DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
 IF P_1 NE 1;
 LOGIT=LOG(P_1) - LOG(1-P_1);
 POFFSET=LOGISTIC(LOGIT-OFFSET);
 DROP P_0;
RUN;

PROC APPEND BASE=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_3
			DATA=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4
			FORCE;
RUN;

PROC SQL;
 DROP TABLE DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
QUIT;


DATA ON_ALLCAMPAIGNS_BALANCED_4_1;
 SET ON_ALLCAMPAIGNS_BALANCED_3;
 WHERE TRAINING = 1 ;
RUN;

DATA ON_ALLCAMPAIGNS_BALANCED_4_2;
 SET ON_ALLCAMPAIGNS_BALANCED_3;
 RESPONDER = . ;
RUN;

DATA ON_ALLCAMPAIGNS_BALANCED_4;
 SET ON_ALLCAMPAIGNS_BALANCED_4_1
 	 ON_ALLCAMPAIGNS_BALANCED_4_2;
RUN;

PROC SQL;
 DROP TABLE ON_ALLCAMPAIGNS_BALANCED_4_1;
 DROP TABLE ON_ALLCAMPAIGNS_BALANCED_4_2;
QUIT;

PROC GLIMMIX DATA=ON_ALLCAMPAIGNS_BALANCED_4 METHOD=MSPL;
 CLASS CARD_STATUS;
 MODEL RESPONDER 
				 = NUM_TXNS_12MO_SLS  DIV_SHP_ON PLCC_TXN_PCT
				   ON_PROMOTIONS_RECEIVED_12MO DAYS_LAST_PUR_ON
				   AVG_ORD_SZ_12MO ONSALE_QTY_12MO RESPONSE_RATE_12MO
				   / SOLUTION DISTRIBUTION=BINOMIAL LINK=LOGIT OFFSET=OFFSET;
 RANDOM INTERCEPT/ SUBJECT = CARD_STATUS;
 OUTPUT OUT = DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4 PRED( BLUP ILINK) = P_MIXED
											  		  PRED( NOBLUP ILINK) = P_FIXED;
 ID CAMPAIGN CUSTOMER_KEY OFFSET RESPONDER _XBETA_ _ZGAMMA_;
RUN;


DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
 WHERE RESPONDER = .;
 DROP RESPONDER;
RUN;

PROC SQL UNDO_POLICY=NONE;
 CREATE TABLE DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4 AS SELECT T1.*, T2.RESPONDER, T2.TRAINING, T2.NET_SALES_AMT
		FROM DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4 T1,
			 DATALIB.ON_ALLCAMPAIGNS_BALANCED T2
 WHERE T1.CAMPAIGN = T2.CAMPAIGN AND T1.CUSTOMER_KEY = T2.CUSTOMER_KEY
 ORDER BY T1.CAMPAIGN, T1.CUSTOMER_KEY;
QUIT;

DATA DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
 SET DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_4;
 LABEL P_FIXED = "P_FIXED"; LABEL P_MIXED = "P_MIXED";
 L_MIXED = P_MIXED / ( 1 + P_MIXED );
 L_FIXED = P_FIXED / ( 1 + P_FIXED );
 LOG_L_MIXED = LOG(L_MIXED);
 LOG_L_FIXED = LOG(L_FIXED);
 DIFF = LOG_L_MIXED - LOG_L_FIXED;
 POFFSET=LOGISTIC(L_MIXED - OFFSET);
RUN;



%MACRO VALIDATE(STARTINDEX, NO_MODELS);

%DO I=&STARTINDEX %TO &NO_MODELS;

	PROC SQL;
	 SELECT COUNT(*) INTO: TRAINCOUNT FROM DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_&I WHERE TRAINING=1;
	QUIT;
	 
	%LET TRAININTV = %EVAL(&TRAINCOUNT/10);

	PROC SORT DATA=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_&I
			  OUT=ON_ALLCAMPAIGNS_BALANCED_RESP_1&I;
	 BY DESCENDING POFFSET DESCENDING NET_SALES_AMT;
	 WHERE TRAINING=1;
	RUN;


	DATA ON_ALLCAMPAIGNS_BALANCED_RESP_1&I;
	 SET ON_ALLCAMPAIGNS_BALANCED_RESP_1&I;
	 IF _N_ GE 1 + 0 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=1;
	 IF _N_ GE 1 + 1 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=2;
	 IF _N_ GE 1 + 2 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=3;
	 IF _N_ GE 1 + 3 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=4;
	 IF _N_ GE 1 + 4 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=5;
	 IF _N_ GE 1 + 5 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=6;
	 IF _N_ GE 1 + 6 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=7;
	 IF _N_ GE 1 + 7 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=8;
	 IF _N_ GE 1 + 8 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=9;
	 IF _N_ GE 1 + 9 * ROUND(&TRAININTV) THEN NEW_RESP_PROB_GRP=10;
	RUN;

	PROC FREQ DATA=ON_ALLCAMPAIGNS_BALANCED_RESP_1&I;
	 TABLE NEW_RESP_PROB_GRP * RESPONDER;
	RUN;


	PROC SQL;
	 CREATE TABLE TEST_1&I AS SELECT DISTINCT NEW_RESP_PROB_GRP, COUNT(CUSTOMER_KEY) AS CUSTOMERS,
	 									   SUM(RESPONDER) AS RESPONDERS, SUM(NET_SALES_AMT) AS NET_SALES
		    FROM ON_ALLCAMPAIGNS_BALANCED_RESP_1&I
			GROUP BY NEW_RESP_PROB_GRP ORDER BY NEW_RESP_PROB_GRP;
	QUIT;





	PROC SQL;
	 SELECT COUNT(*) INTO: TESTCOUNT FROM DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_&I WHERE TRAINING=0;
	QUIT;
	 
	%LET TESTINTV = %EVAL(&TESTCOUNT/10);

	PROC SORT DATA=DATALIB.ON_ALLCAMPAIGNS_BALANCED_RESP_&I
			  OUT=ON_ALLCAMPAIGNS_BALANCED_RESP_2&I;
	 BY DESCENDING POFFSET DESCENDING NET_SALES_AMT;
	 WHERE TRAINING=0;
	RUN;


	DATA ON_ALLCAMPAIGNS_BALANCED_RESP_2&I;
	 SET ON_ALLCAMPAIGNS_BALANCED_RESP_2&I;
	 IF _N_ GE 1 + 0 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=1;
	 IF _N_ GE 1 + 1 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=2;
	 IF _N_ GE 1 + 2 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=3;
	 IF _N_ GE 1 + 3 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=4;
	 IF _N_ GE 1 + 4 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=5;
	 IF _N_ GE 1 + 5 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=6;
	 IF _N_ GE 1 + 6 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=7;
	 IF _N_ GE 1 + 7 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=8;
	 IF _N_ GE 1 + 8 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=9;
	 IF _N_ GE 1 + 9 * ROUND(&TESTINTV) THEN NEW_RESP_PROB_GRP=10;
	RUN;

	PROC FREQ DATA=ON_ALLCAMPAIGNS_BALANCED_RESP_2&I;
	 TABLE NEW_RESP_PROB_GRP * RESPONDER;
	RUN;


	PROC SQL;
	 CREATE TABLE TEST_2&I AS SELECT DISTINCT NEW_RESP_PROB_GRP, COUNT(CUSTOMER_KEY) AS CUSTOMERS,
	 									   SUM(RESPONDER) AS RESPONDERS, SUM(NET_SALES_AMT) AS NET_SALES
		    FROM ON_ALLCAMPAIGNS_BALANCED_RESP_2&I
			GROUP BY NEW_RESP_PROB_GRP ORDER BY NEW_RESP_PROB_GRP;
	QUIT;

%END;

%MEND;

%VALIDATE(STARTINDEX=4, NO_MODELS=4);
