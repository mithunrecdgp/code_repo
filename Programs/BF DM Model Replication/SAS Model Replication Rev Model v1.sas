
LIBNAME TA4U1R9 ORACLE USER=TA4U1R9 PW="T$numoy009$!" PATH=SAS10P1 PRESERVE_TAB_NAMES=YES SCHEMA=TA4U1R9;

LIBNAME CORESAS ORACLE USER=TA4U1R9 PW="T$numoy009$!" PATH=SAS10P1 PRESERVE_TAB_NAMES=YES SCHEMA=CORESAS;

LIBNAME DATALIB "\\10.8.8.51\LV0\TANUMOY\DATASETS\MODEL REPLICATION";

DATA DATALIB.BF_ALLCAMPAIGNS_RESPONDERS;
 SET DATALIB.BF_ALLCAMPAIGNS_BALANCED;
 WHERE RESPONDER=1;
RUN;



PROC UNIVARIATE DATA=DATALIB.BF_ALLCAMPAIGNS_RESPONDERS;
VAR NET_SALES_AMT;
OUTPUT OUT=DATALIB.BF_NET_SLS_PROMO_PCTL
	   PCTLPRE = NET_SALES_AMT_
	   PCTLPTS= 0.5 50 99.5;
RUN;

DATA BF_ALLCAMPAIGNS_RESPONDERS_1;
KEEP NET_SALES_AMT AVG_ORD_SZ_12MO_CP ONSALE_QTY_12MO AVG_UNT_RTL_CP
	 UNITS_PER_TXN_12MO_SLS DIV_SHP_BF TREATMENT_GROUP RESPONDER
	 ONSALE_QTY_6MO DAYS_LAST_PUR_BF AVG_ORD_SZ_12MO
	 NET_SALES_AMT_12MO_RTN AVG_UNT_RTL NUM_TXNS_12MO_SLS BF_PROMOTIONS_RECEIVED_12MO
	 CUSTOMER_KEY NET_SALES_AMT TREATMENT_CODE DAYS_LAST_PUR_CP
	 NET_SALES_AMT_12MO_SLS DISCOUNT_PCT_12MO NUM_TXNS_12MO_RTN
	 TRAINING CAMPAIGN PLCC_TXN_PCT YEARS_ON_BOOKS OFFSET NUM_PLCC_TXNS_12MO_SLS WT;
SET DATALIB.BF_ALLCAMPAIGNS_RESPONDERS; 
RUN;

*STORE THE 0.5 PERCENTILE, MEDIAN AND 99.5 PERCENTILE VALUES FOR THE FEATURES IN GLOBAL VARIABLES;

DATA DATALIB.BF_ALLCAMPAIGNS_COMBINED_PCTL;
SET DATALIB.BF_ALLCAMPAIGNS_COMBINED_PCTL;

 CALL SYMPUT ("AVG_ORD_SZ_12MO_CP_LC", AVG_ORD_SZ_12MO_CP_0_3);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_CP_50", AVG_ORD_SZ_12MO_CP_50);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_CP_UC", AVG_ORD_SZ_12MO_CP_99_7);

 CALL SYMPUT ("AVG_ORD_SZ_12MO_LC", AVG_ORD_SZ_12MO_0_3);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_50", AVG_ORD_SZ_12MO_50);
 CALL SYMPUT ("AVG_ORD_SZ_12MO_UC", AVG_ORD_SZ_12MO_99_7);

 CALL SYMPUT ("ONSALE_QTY_12MO_LC", ONSALE_QTY_12MO_0_3);
 CALL SYMPUT ("ONSALE_QTY_12MO_50", ONSALE_QTY_12MO_50);
 CALL SYMPUT ("ONSALE_QTY_12MO_UC", ONSALE_QTY_12MO_99_7);

 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_LC", NET_SALES_AMT_12MO_RTN_0_3);
 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_50", NET_SALES_AMT_12MO_RTN_50);
 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_UC", NET_SALES_AMT_12MO_RTN_99_7);

 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_LC", NET_SALES_AMT_12MO_SLS_0_3);
 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_50", NET_SALES_AMT_12MO_SLS_50);
 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_UC", NET_SALES_AMT_12MO_SLS_99_7);

 CALL SYMPUT ("AVG_UNT_RTL_CP_LC", AVG_UNT_RTL_CP_0_3);
 CALL SYMPUT ("AVG_UNT_RTL_CP_50", AVG_UNT_RTL_CP_50);
 CALL SYMPUT ("AVG_UNT_RTL_CP_UC", AVG_UNT_RTL_CP_99_7);

 CALL SYMPUT ("AVG_UNT_RTL_LC", AVG_UNT_RTL_0_3);
 CALL SYMPUT ("AVG_UNT_RTL_50", AVG_UNT_RTL_50);
 CALL SYMPUT ("AVG_UNT_RTL_UC", AVG_UNT_RTL_99_7);

 CALL SYMPUT ("DISCOUNT_PCT_12MO_LC", DISCOUNT_PCT_12MO_0_3);
 CALL SYMPUT ("DISCOUNT_PCT_12MO_50", DISCOUNT_PCT_12MO_50);
 CALL SYMPUT ("DISCOUNT_PCT_12MO_UC", DISCOUNT_PCT_12MO_99_7);

 CALL SYMPUT ("YEARS_ON_BOOKS_LC", YEARS_ON_BOOKS_0_3);
 CALL SYMPUT ("YEARS_ON_BOOKS_50", YEARS_ON_BOOKS_50);
 CALL SYMPUT ("YEARS_ON_BOOKS_UC", YEARS_ON_BOOKS_99_7);

 CALL SYMPUT ("UNITS_PER_TXN_12MO_SLS_LC", UNITS_PER_TXN_12MO_SLS_0_3);
 CALL SYMPUT ("UNITS_PER_TXN_12MO_SLS_50", UNITS_PER_TXN_12MO_SLS_50);
 CALL SYMPUT ("UNITS_PER_TXN_12MO_SLS_UC", UNITS_PER_TXN_12MO_SLS_99_7);

 CALL SYMPUT ("NUM_TXNS_12MO_SLS_LC", NUM_TXNS_12MO_SLS_0_3);
 CALL SYMPUT ("NUM_TXNS_12MO_SLS_50", NUM_TXNS_12MO_SLS_50);
 CALL SYMPUT ("NUM_TXNS_12MO_SLS_UC", NUM_TXNS_12MO_SLS_99_7); 

 CALL SYMPUT ("NUM_TXNS_12MO_RTN_LC", NUM_TXNS_12MO_RTN_0_3); 
 CALL SYMPUT ("NUM_TXNS_12MO_RTN_50", NUM_TXNS_12MO_RTN_50);
 CALL SYMPUT ("NUM_TXNS_12MO_RTN_UC", NUM_TXNS_12MO_RTN_99_7);

 CALL SYMPUT ("DIV_SHP_BF_LC", DIV_SHP_BF_0_3);
 CALL SYMPUT ("DIV_SHP_BF_50", DIV_SHP_BF_50);
 CALL SYMPUT ("DIV_SHP_BF_UC", DIV_SHP_BF_99_7);

 CALL SYMPUT ("BF_PROMOTIONS_RECEIVED_12MO_LC", BF_PROMOTIONS_RECEIVED_12MO_0_3);
 CALL SYMPUT ("BF_PROMOTIONS_RECEIVED_12MO_50", BF_PROMOTIONS_RECEIVED_12MO_50);
 CALL SYMPUT ("BF_PROMOTIONS_RECEIVED_12MO_UC", BF_PROMOTIONS_RECEIVED_12MO_99_7);

 CALL SYMPUT ("ONSALE_QTY_6MO_LC", ONSALE_QTY_6MO_0_3);
 CALL SYMPUT ("ONSALE_QTY_6MO_50", ONSALE_QTY_6MO_50);
 CALL SYMPUT ("ONSALE_QTY_6MO_UC", ONSALE_QTY_6MO_99_7); 

 CALL SYMPUT ("DAYS_LAST_PUR_BF_LC", DAYS_LAST_PUR_BF_0_3);
 CALL SYMPUT ("DAYS_LAST_PUR_BF_50", DAYS_LAST_PUR_BF_50);
 CALL SYMPUT ("DAYS_LAST_PUR_BF_UC", DAYS_LAST_PUR_BF_99_7);

 CALL SYMPUT ("DAYS_LAST_PUR_CP_LC", DAYS_LAST_PUR_CP_0_3);
 CALL SYMPUT ("DAYS_LAST_PUR_CP_50", DAYS_LAST_PUR_CP_50);
 CALL SYMPUT ("DAYS_LAST_PUR_CP_UC", DAYS_LAST_PUR_CP_99_7); 

 CALL SYMPUT ("PLCC_TXN_PCT_LC", PLCC_TXN_PCT_0_3);
 CALL SYMPUT ("PLCC_TXN_PCT_50", PLCC_TXN_PCT_50);
 CALL SYMPUT ("PLCC_TXN_PCT_UC", PLCC_TXN_PCT_99_7); 

 CALL SYMPUT ("NUM_PLCC_TXNS_12MO_SLS_LC", NUM_PLCC_TXNS_12MO_SLS_0_3);
 CALL SYMPUT ("NUM_PLCC_TXNS_12MO_SLS_50", NUM_PLCC_TXNS_12MO_SLS_50);
 CALL SYMPUT ("NUM_PLCC_TXNS_12MO_SLS_UC", NUM_PLCC_TXNS_12MO_SLS_99_7); 

 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_BR_LC", NET_SALES_AMT_12MO_RTN_BR_0_3);
 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_BR_50", NET_SALES_AMT_12MO_RTN_BR_50);
 CALL SYMPUT ("NET_SALES_AMT_12MO_RTN_BR_UC", NET_SALES_AMT_12MO_RTN_BR_99_7);

 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_BR_LC", NET_SALES_AMT_12MO_SLS_BR_0_3);
 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_BR_50", NET_SALES_AMT_12MO_SLS_BR_50);
 CALL SYMPUT ("NET_SALES_AMT_12MO_SLS_BR_UC", NET_SALES_AMT_12MO_SLS_BR_99_7);

 CALL SYMPUT ("RATIO_BR_BF_LC", RATIO_BR_BF_0_3);
 CALL SYMPUT ("RATIO_BR_BF_50", RATIO_BR_BF_50);
 CALL SYMPUT ("RATIO_BR_BF_UC", RATIO_BR_BF_99_7);
RUN;

DATA DATALIB.BF_NET_SLS_PROMO_PCTL; 
 SET DATALIB.BF_NET_SLS_PROMO_PCTL;
 CALL SYMPUT ("NET_SALES_AMT_LC", NET_SALES_AMT_0_5);
 CALL SYMPUT ("NET_SALES_AMT_50", NET_SALES_AMT_50);
 CALL SYMPUT ("NET_SALES_AMT_UC", NET_SALES_AMT_99_5);
RUN;
*CAP THE VARIABLES AT THEIR 0.5 PERCENTILE AND 99.5 PERCENTILE VALUES;

DATA BF_ALLCAMPAIGNS_RESPONDERS_2;
SET BF_ALLCAMPAIGNS_RESPONDERS_1;

IF NET_SALES_AMT > &NET_SALES_AMT_UC THEN NET_SALES_AMT = &NET_SALES_AMT_UC;
IF AVG_ORD_SZ_12MO_CP > &AVG_ORD_SZ_12MO_CP_UC THEN AVG_ORD_SZ_12MO_CP = &AVG_ORD_SZ_12MO_CP_UC;
IF AVG_ORD_SZ_12MO > &AVG_ORD_SZ_12MO_UC THEN AVG_ORD_SZ_12MO = &AVG_ORD_SZ_12MO_UC;
IF ONSALE_QTY_12MO > &ONSALE_QTY_12MO_UC THEN ONSALE_QTY_12MO = &ONSALE_QTY_12MO_UC;
IF NET_SALES_AMT_12MO_RTN > &NET_SALES_AMT_12MO_RTN_UC THEN NET_SALES_AMT_12MO_RTN = &NET_SALES_AMT_12MO_RTN_UC;
IF NET_SALES_AMT_12MO_SLS > &NET_SALES_AMT_12MO_SLS_UC THEN NET_SALES_AMT_12MO_SLS = &NET_SALES_AMT_12MO_SLS_UC;
IF AVG_UNT_RTL_CP > &AVG_UNT_RTL_CP_UC THEN AVG_UNT_RTL_CP = &AVG_UNT_RTL_CP_UC;
IF AVG_UNT_RTL > &AVG_UNT_RTL_UC THEN AVG_UNT_RTL = &AVG_UNT_RTL_UC;
IF DISCOUNT_PCT_12MO > &DISCOUNT_PCT_12MO_UC THEN DISCOUNT_PCT_12MO = &DISCOUNT_PCT_12MO_UC;
IF YEARS_ON_BOOKS > &YEARS_ON_BOOKS_UC THEN YEARS_ON_BOOKS = &YEARS_ON_BOOKS_UC;
IF UNITS_PER_TXN_12MO_SLS > &UNITS_PER_TXN_12MO_SLS_UC THEN UNITS_PER_TXN_12MO_SLS = &UNITS_PER_TXN_12MO_SLS_UC;
IF NUM_TXNS_12MO_SLS > &NUM_TXNS_12MO_SLS_UC THEN NUM_TXNS_12MO_SLS = &NUM_TXNS_12MO_SLS_UC;
IF NUM_TXNS_12MO_RTN > &NUM_TXNS_12MO_RTN_UC THEN NUM_TXNS_12MO_RTN = &NUM_TXNS_12MO_RTN_UC;
IF DIV_SHP_BF > &DIV_SHP_BF_UC THEN DIV_SHP_BF = &DIV_SHP_BF_UC;
IF BF_PROMOTIONS_RECEIVED_12MO > &BF_PROMOTIONS_RECEIVED_12MO_UC THEN BF_PROMOTIONS_RECEIVED_12MO = &BF_PROMOTIONS_RECEIVED_12MO_UC;
IF ONSALE_QTY_6MO > &ONSALE_QTY_6MO_UC THEN ONSALE_QTY_6MO = &ONSALE_QTY_6MO_UC;
IF DAYS_LAST_PUR_CP > &DAYS_LAST_PUR_CP_UC THEN DAYS_LAST_PUR_CP = &DAYS_LAST_PUR_CP_UC;
IF DAYS_LAST_PUR_BF > &DAYS_LAST_PUR_BF_UC THEN DAYS_LAST_PUR_BF = &DAYS_LAST_PUR_BF_UC;
IF PLCC_TXN_PCT > &PLCC_TXN_PCT_UC THEN PLCC_TXN_PCT = &PLCC_TXN_PCT_UC;
IF NUM_PLCC_TXNS_12MO_SLS > &NUM_PLCC_TXNS_12MO_SLS_UC THEN NUM_PLCC_TXNS_12MO_SLS = &NUM_PLCC_TXNS_12MO_SLS_UC;
IF NET_SALES_AMT_12MO_RTN_BF > &NET_SALES_AMT_12MO_RTN_BR_UC THEN NET_SALES_AMT_12MO_RTN_BF = &NET_SALES_AMT_12MO_RTN_BR_UC;
IF NET_SALES_AMT_12MO_SLS_BF > &NET_SALES_AMT_12MO_SLS_BR_UC THEN NET_SALES_AMT_12MO_SLS_BF = &NET_SALES_AMT_12MO_SLS_BR_UC;
IF RATIO_BR_BF > &RATIO_BR_BF_UC THEN RATIO_BR_BF = &RATIO_BR_BF_UC;

IF NET_SALES_AMT < &NET_SALES_AMT_LC THEN NET_SALES_AMT = &NET_SALES_AMT_LC;
IF AVG_ORD_SZ_12MO_CP < &AVG_ORD_SZ_12MO_CP_LC THEN AVG_ORD_SZ_12MO_CP = &AVG_ORD_SZ_12MO_CP_LC;
IF AVG_ORD_SZ_12MO < &AVG_ORD_SZ_12MO_LC THEN AVG_ORD_SZ_12MO = &AVG_ORD_SZ_12MO_LC;
IF ONSALE_QTY_12MO < &ONSALE_QTY_12MO_LC THEN ONSALE_QTY_12MO = &ONSALE_QTY_12MO_LC;
IF NET_SALES_AMT_12MO_RTN < &NET_SALES_AMT_12MO_RTN_LC THEN NET_SALES_AMT_12MO_RTN = &NET_SALES_AMT_12MO_RTN_LC;
IF NET_SALES_AMT_12MO_SLS < &NET_SALES_AMT_12MO_SLS_LC THEN NET_SALES_AMT_12MO_SLS = &NET_SALES_AMT_12MO_SLS_LC;
IF AVG_UNT_RTL_CP < &AVG_UNT_RTL_CP_LC THEN AVG_UNT_RTL_CP = &AVG_UNT_RTL_CP_LC;
IF AVG_UNT_RTL < &AVG_UNT_RTL_LC THEN AVG_UNT_RTL = &AVG_UNT_RTL_LC;
IF DISCOUNT_PCT_12MO < &DISCOUNT_PCT_12MO_LC THEN DISCOUNT_PCT_12MO = &DISCOUNT_PCT_12MO_LC;
IF YEARS_ON_BOOKS < &YEARS_ON_BOOKS_LC THEN YEARS_ON_BOOKS = &YEARS_ON_BOOKS_LC;
IF UNITS_PER_TXN_12MO_SLS < &UNITS_PER_TXN_12MO_SLS_LC THEN UNITS_PER_TXN_12MO_SLS = &UNITS_PER_TXN_12MO_SLS_LC;
IF NUM_TXNS_12MO_SLS < &NUM_TXNS_12MO_SLS_LC THEN NUM_TXNS_12MO_SLS = &NUM_TXNS_12MO_SLS_LC;
IF NUM_TXNS_12MO_RTN < &NUM_TXNS_12MO_RTN_LC THEN NUM_TXNS_12MO_RTN = &NUM_TXNS_12MO_RTN_LC;
IF DIV_SHP_BF < &DIV_SHP_BF_LC THEN DIV_SHP_BF = &DIV_SHP_BF_LC;
IF BF_PROMOTIONS_RECEIVED_12MO < &BF_PROMOTIONS_RECEIVED_12MO_LC THEN BF_PROMOTIONS_RECEIVED_12MO = &BF_PROMOTIONS_RECEIVED_12MO_LC;
IF ONSALE_QTY_6MO < &ONSALE_QTY_6MO_LC THEN ONSALE_QTY_6MO = &ONSALE_QTY_6MO_LC;
IF DAYS_LAST_PUR_CP < &DAYS_LAST_PUR_CP_LC THEN DAYS_LAST_PUR_CP = &DAYS_LAST_PUR_CP_LC;
IF DAYS_LAST_PUR_BF < &DAYS_LAST_PUR_BF_LC THEN DAYS_LAST_PUR_BF = &DAYS_LAST_PUR_BF_LC;
IF PLCC_TXN_PCT < &PLCC_TXN_PCT_LC THEN PLCC_TXN_PCT = &PLCC_TXN_PCT_LC;
IF NUM_PLCC_TXNS_12MO_SLS < &NUM_PLCC_TXNS_12MO_SLS_LC THEN NUM_PLCC_TXNS_12MO_SLS = &NUM_PLCC_TXNS_12MO_SLS_LC;
IF NET_SALES_AMT_12MO_RTN_BF < &NET_SALES_AMT_12MO_RTN_BR_LC THEN NET_SALES_AMT_12MO_RTN_BF = &NET_SALES_AMT_12MO_RTN_BR_LC;
IF NET_SALES_AMT_12MO_SLS_BF < &NET_SALES_AMT_12MO_SLS_BR_LC THEN NET_SALES_AMT_12MO_SLS_BF = &NET_SALES_AMT_12MO_SLS_BR_LC;
IF RATIO_BR_BF < &RATIO_BR_BF_LC THEN RATIO_BR_BF = &RATIO_BR_BF_LC;

RUN;



*SCALE THE VARIABLES SO THAT THEY RANGE BETWEEN 0 AND 1;

DATA BF_ALLCAMPAIGNS_RESPONDERS_3;
SET BF_ALLCAMPAIGNS_RESPONDERS_2;

AVG_ORD_SZ_12MO_CP = (AVG_ORD_SZ_12MO_CP - &AVG_ORD_SZ_12MO_CP_LC) / (&AVG_ORD_SZ_12MO_CP_UC - &AVG_ORD_SZ_12MO_CP_LC);
AVG_ORD_SZ_12MO = (AVG_ORD_SZ_12MO - &AVG_ORD_SZ_12MO_LC) / (&AVG_ORD_SZ_12MO_UC - &AVG_ORD_SZ_12MO_LC);
ONSALE_QTY_12MO = (ONSALE_QTY_12MO - &ONSALE_QTY_12MO_LC) / (&ONSALE_QTY_12MO_UC - &ONSALE_QTY_12MO_LC);
NET_SALES_AMT_12MO_RTN = (NET_SALES_AMT_12MO_RTN - &NET_SALES_AMT_12MO_RTN_LC) / (&NET_SALES_AMT_12MO_RTN_UC - &NET_SALES_AMT_12MO_RTN_LC);
NET_SALES_AMT_12MO_SLS = (NET_SALES_AMT_12MO_SLS - &NET_SALES_AMT_12MO_SLS_LC) / (&NET_SALES_AMT_12MO_SLS_UC - &NET_SALES_AMT_12MO_SLS_LC);
AVG_UNT_RTL_CP = (AVG_UNT_RTL_CP - &AVG_UNT_RTL_CP_LC) / (&AVG_UNT_RTL_CP_UC - &AVG_UNT_RTL_CP_LC);
AVG_UNT_RTL = (AVG_UNT_RTL - &AVG_UNT_RTL_LC) / (&AVG_UNT_RTL_UC - &AVG_UNT_RTL_LC);
DISCOUNT_PCT_12MO = (DISCOUNT_PCT_12MO - &DISCOUNT_PCT_12MO_LC) / (&DISCOUNT_PCT_12MO_UC - &DISCOUNT_PCT_12MO_LC);
YEARS_ON_BOOKS = (YEARS_ON_BOOKS - &YEARS_ON_BOOKS_LC) / (&YEARS_ON_BOOKS_UC - &YEARS_ON_BOOKS_LC);
UNITS_PER_TXN_12MO_SLS = (UNITS_PER_TXN_12MO_SLS - &UNITS_PER_TXN_12MO_SLS_LC) / (&UNITS_PER_TXN_12MO_SLS_UC - &UNITS_PER_TXN_12MO_SLS_LC);
NUM_TXNS_12MO_SLS = (NUM_TXNS_12MO_SLS - &NUM_TXNS_12MO_SLS_LC) / (&NUM_TXNS_12MO_SLS_UC - &NUM_TXNS_12MO_SLS_LC);
NUM_TXNS_12MO_RTN = (NUM_TXNS_12MO_RTN - &NUM_TXNS_12MO_RTN_LC) / (&NUM_TXNS_12MO_RTN_UC - &NUM_TXNS_12MO_RTN_LC);
DIV_SHP_BF = (DIV_SHP_BF - &DIV_SHP_BF_LC) / (&DIV_SHP_BF_UC - &DIV_SHP_BF_LC);
BF_PROMOTIONS_RECEIVED_12MO = (BF_PROMOTIONS_RECEIVED_12MO - &BF_PROMOTIONS_RECEIVED_12MO_LC) / (&BF_PROMOTIONS_RECEIVED_12MO_UC - &BF_PROMOTIONS_RECEIVED_12MO_LC);
ONSALE_QTY_6MO = (ONSALE_QTY_6MO - &ONSALE_QTY_6MO_LC) / (&ONSALE_QTY_6MO_UC - &ONSALE_QTY_6MO_LC);
DAYS_LAST_PUR_BF = (DAYS_LAST_PUR_BF - &DAYS_LAST_PUR_BF_LC) / (&DAYS_LAST_PUR_BF_UC - &DAYS_LAST_PUR_BF_LC);
DAYS_LAST_PUR_CP = (DAYS_LAST_PUR_CP - &DAYS_LAST_PUR_CP_LC) / (&DAYS_LAST_PUR_CP_UC - &DAYS_LAST_PUR_CP_LC);
PLCC_TXN_PCT = (PLCC_TXN_PCT - &PLCC_TXN_PCT_LC) / (&PLCC_TXN_PCT_UC - &PLCC_TXN_PCT_LC);
NUM_PLCC_TXNS_12MO_SLS = (NUM_PLCC_TXNS_12MO_SLS - &NUM_PLCC_TXNS_12MO_SLS_LC) / (&NUM_PLCC_TXNS_12MO_SLS_UC - &NUM_PLCC_TXNS_12MO_SLS_LC);
NET_SALES_AMT_12MO_RTN_BF = (NET_SALES_AMT_12MO_RTN_BF - &NET_SALES_AMT_12MO_RTN_BR_LC) / (&NET_SALES_AMT_12MO_RTN_BR_UC - &NET_SALES_AMT_12MO_RTN_BR_LC);
NET_SALES_AMT_12MO_SLS_BF = (NET_SALES_AMT_12MO_SLS_BF - &NET_SALES_AMT_12MO_SLS_BR_LC) / (&NET_SALES_AMT_12MO_SLS_BR_UC - &NET_SALES_AMT_12MO_SLS_BR_LC);
RATIO_BR_BF = (RATIO_BR_BF - &RATIO_BR_BF_LC) / (&RATIO_BR_BF_UC - &RATIO_BR_BF_LC);

RUN;

PROC REG DATA=BF_ALLCAMPAIGNS_RESPONDERS_3 OUTEST=DATALIB.BF_ALLCAMPAIGNS_REVEST;
 MODEL NET_SALES_AMT =  AVG_ORD_SZ_12MO_CP
						NET_SALES_AMT_12MO_RTN 
						NET_SALES_AMT_12MO_SLS 
						AVG_UNT_RTL 
						DISCOUNT_PCT_12MO 
						YEARS_ON_BOOKS 
						UNITS_PER_TXN_12MO_SLS
						/ VIF;
 WHERE TREATMENT_GROUP=1;
RUN;
QUIT;




PROC REG DATA=DATALIB.BF_BALANCED_ORIG_SCORES;
  MODEL NET_SALES_AMT = OUTLET_FI_PROFIT_EXPECTED_PROF;
  WHERE RESPONDER=1;
RUN;
QUIT;


PROC SCORE DATA=DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS 
		   OUT=DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS
		   SCORE=DATALIB.BF_ALLCAMPAIGNS_REVEST TYPE=PARMS;
 VAR AVG_ORD_SZ_12MO_CP
	 NET_SALES_AMT_12MO_RTN 
	 NET_SALES_AMT_12MO_SLS 
	 AVG_UNT_RTL 
	 DISCOUNT_PCT_12MO 
	 YEARS_ON_BOOKS 
	 UNITS_PER_TXN_12MO_SLS
	 ;
RUN;

DATA DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
 RENAME MODEL1=NEW_PREDICTED_REVENUE;
 SET DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
RUN;

DATA DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
 SET DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
 NEW_EXP_REVENUE = POFFSET * NEW_PREDICTED_REVENUE;
RUN;


PROC LOGISTIC DATA=DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
  MODEL RESPONDER(EVENT="1")=	NEW_EXP_REVENUE
								/EXPB LACKFIT CTABLE;
RUN;

PROC LOGISTIC DATA=DATALIB.BF_BALANCED_ORIG_SCORES;
  MODEL RESPONDER(EVENT="1")=	EXP_PROF
								/EXPB LACKFIT CTABLE;
RUN;


PROC SQL;
 CREATE TABLE DATALIB.BF_BALANCED_VALIDATION AS SELECT T1.*, T2.POFFSET, T2.NEW_EXP_REVENUE, T2.NEW_PREDICTED_REVENUE 
		FROM DATALIB.BF_BALANCED_ORIG_SCORES T1,
			 DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS T2
		WHERE T1.CUSTOMER_KEY = T2.CUSTOMER_KEY AND T1.CAMPAIGN=T2.CAMPAIGN;
QUIT;




PROC SQL;
 SELECT COUNT(*) INTO: TRAINCOUNT FROM DATALIB.BF_BALANCED_ORIG_SCORES;
QUIT;
 
%LET TRAININTV = %EVAL(&TRAINCOUNT/10);

PROC SORT DATA=DATALIB.BF_BALANCED_ORIG_SCORES;
 BY DESCENDING EXP_PROF DESCENDING NET_SALES_AMT;
RUN;

DATA DATALIB.BF_BALANCED_ORIG_SCORES;
 SET DATALIB.BF_BALANCED_ORIG_SCORES;
 IF _N_ GE 1 + 0 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=1;
 IF _N_ GE 1 + 1 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=2;
 IF _N_ GE 1 + 2 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=3;
 IF _N_ GE 1 + 3 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=4;
 IF _N_ GE 1 + 4 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=5;
 IF _N_ GE 1 + 5 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=6;
 IF _N_ GE 1 + 6 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=7;
 IF _N_ GE 1 + 7 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=8;
 IF _N_ GE 1 + 8 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=9;
 IF _N_ GE 1 + 9 * ROUND(&TRAININTV) THEN EXP_PROF_GRP=10;
RUN;

PROC FREQ DATA=DATALIB.BF_BALANCED_ORIG_SCORES;
 TABLE EXP_PROF_GRP * RESPONDER;
RUN;

PROC SQL;
 CREATE TABLE TEST1 AS SELECT DISTINCT EXP_PROF_GRP, COUNT(CUSTOMER_KEY) AS CUSTOMERS,
 									   SUM(RESPONDER) AS RESPONDERS, SUM(NET_SALES_AMT) AS NET_SALES
	    FROM DATALIB.BF_BALANCED_ORIG_SCORES
		GROUP BY EXP_PROF_GRP ORDER BY EXP_PROF_GRP;
QUIT;






PROC SQL;
 SELECT COUNT(*) INTO: TRAINCOUNT FROM DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
QUIT;
 
%LET TRAININTV = %EVAL(&TRAINCOUNT/10);

PROC SORT DATA=DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
 BY DESCENDING NEW_EXP_REVENUE DESCENDING NET_SALES_AMT;
RUN;


DATA DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
 SET DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
 IF _N_ GE 1 + 0 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=1;
 IF _N_ GE 1 + 1 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=2;
 IF _N_ GE 1 + 2 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=3;
 IF _N_ GE 1 + 3 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=4;
 IF _N_ GE 1 + 4 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=5;
 IF _N_ GE 1 + 5 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=6;
 IF _N_ GE 1 + 6 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=7;
 IF _N_ GE 1 + 7 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=8;
 IF _N_ GE 1 + 8 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=9;
 IF _N_ GE 1 + 9 * ROUND(&TRAININTV) THEN NEW_EXP_REVENUE_GRP=10;
RUN;

PROC FREQ DATA=DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS;
 TABLE NEW_EXP_REVENUE_GRP * RESPONDER;
RUN;


PROC SQL;
 CREATE TABLE TEST2 AS SELECT DISTINCT NEW_EXP_REVENUE_GRP, COUNT(CUSTOMER_KEY) AS CUSTOMERS,
 									   SUM(RESPONDER) AS RESPONDERS, SUM(NET_SALES_AMT) AS NET_SALES
	    FROM DATALIB.BF_ALLCAMPAIGNS_BALANCED_FITS
		GROUP BY NEW_EXP_REVENUE_GRP ORDER BY NEW_EXP_REVENUE_GRP;
QUIT;
